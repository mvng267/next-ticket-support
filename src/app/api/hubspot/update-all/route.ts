// API route c·∫≠p nh·∫≠t t·∫•t c·∫£ tickets trong Firebase
import { NextRequest, NextResponse } from 'next/server';
import { getTicketsFromFirestore } from '@/lib/firestore';
import { ApiResponse } from '@/types';

/**
 * POST /api/hubspot/update-all
 * C·∫≠p nh·∫≠t t·∫•t c·∫£ tickets trong Firebase v·ªõi th√¥ng tin m·ªõi t·ª´ HubSpot
 */
export async function POST(request: NextRequest) {
  try {
    const logs: string[] = [];
    logs.push('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t t·∫•t c·∫£ tickets...');
    
    // L·∫•y t·∫•t c·∫£ tickets t·ª´ Firebase
    const tickets = await getTicketsFromFirestore();
    logs.push(`üìã T√¨m th·∫•y ${tickets.length} tickets trong Firebase`);
    
    if (tickets.length === 0) {
      return NextResponse.json({
        success: true,
        message: 'Kh√¥ng c√≥ tickets n√†o ƒë·ªÉ c·∫≠p nh·∫≠t',
        data: { count: 0 },
        logs
      } as ApiResponse);
    }
    
    let successCount = 0;
    let errorCount = 0;
    
    // C·∫≠p nh·∫≠t t·ª´ng ticket
    for (const ticket of tickets) {
      try {
        const response = await fetch(`${request.nextUrl.origin}/api/hubspot/update-ticket`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ ticketId: ticket.ticketId })
        });
        
        if (response.ok) {
          successCount++;
          logs.push(`‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng ticket ${ticket.ticketId}`);
        } else {
          errorCount++;
          logs.push(`‚ùå L·ªói c·∫≠p nh·∫≠t ticket ${ticket.ticketId}`);
        }
        
        // Delay ƒë·ªÉ tr√°nh rate limit
        await new Promise(resolve => setTimeout(resolve, 200));
        
      } catch (error) {
        errorCount++;
        logs.push(`‚ùå L·ªói c·∫≠p nh·∫≠t ticket ${ticket.ticketId}: ${error}`);
      }
    }
    
    logs.push(`üéâ Ho√†n th√†nh: ${successCount} th√†nh c√¥ng, ${errorCount} l·ªói`);
    
    return NextResponse.json({
      success: true,
      message: `ƒê√£ c·∫≠p nh·∫≠t ${successCount}/${tickets.length} tickets`,
      data: {
        total: tickets.length,
        success: successCount,
        errors: errorCount
      },
      logs
    } as ApiResponse);
    
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('Error updating all tickets:', error);
    
    return NextResponse.json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tickets',
      error: errorMessage
    } as ApiResponse, { status: 500 });
  }
}