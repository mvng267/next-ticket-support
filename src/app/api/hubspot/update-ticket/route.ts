// API route c·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt ticket t·ª´ HubSpot
import { NextRequest, NextResponse } from 'next/server';
import { fetchTicketById, fetchOwnerInfo, fetchTicketCategoryLabel } from '@/lib/hubspot';
import { updateTicketInFirestore } from '@/lib/firestore';
import { ApiResponse } from '@/types';

/**
 * POST /api/hubspot/update-ticket
 * C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt ticket t·ª´ HubSpot v√†o Firebase
 */
export async function POST(request: NextRequest) {
  try {
    const { ticketId } = await request.json();
    
    if (!ticketId) {
      return NextResponse.json({
        success: false,
        message: 'Ticket ID is required',
        error: 'Missing ticketId parameter'
      } as ApiResponse, { status: 400 });
    }

    const logs: string[] = [];
    logs.push(`üîç ƒêang l·∫•y th√¥ng tin chi ti·∫øt cho ticket ID: ${ticketId}`);

    // L·∫•y th√¥ng tin ticket t·ª´ HubSpot
    const hubspotTicket = await fetchTicketById(ticketId);
    if (!hubspotTicket) {
      return NextResponse.json({
        success: false,
        message: 'Ticket not found in HubSpot',
        error: `Ticket ${ticketId} not found`
      } as ApiResponse, { status: 404 });
    }

    logs.push('üì• ƒê√£ l·∫•y th√¥ng tin ticket t·ª´ HubSpot');

    // H√†m helper ƒë·ªÉ l·∫•y gi√° tr·ªã t·ª´ property
    const getPropertyValue = (prop: unknown): string => {
      if (!prop) return '';
      if (typeof prop === 'string') return prop;
      if (typeof prop === 'object' && prop !== null && 'value' in prop) {
        return String((prop as { value: unknown }).value);
      }
      return String(prop);
    };

    // X·ª≠ l√Ω d·ªØ li·ªáu chi ti·∫øt
    const props = hubspotTicket.properties || {};
    
    // L·∫•y createdate d∆∞·ªõi d·∫°ng string nguy√™n b·∫£n
    const createDateValue = getPropertyValue(props.createdate);
    logs.push(`üìÖ CreateDate t·ª´ HubSpot (string): "${createDateValue}"`);
    
    const detailedTicket = {
      ticketId: getPropertyValue(props.hs_ticket_id) || ticketId,
      category: getPropertyValue(props.hs_ticket_category),
      categoryLabel: '',
      ownerId: getPropertyValue(props.hubspot_owner_id),
      ownerName: '',
      companyName: getPropertyValue(props.hs_primary_company_name),
      subject: getPropertyValue(props.subject),
      sourceType: getPropertyValue(props.source_type),
      content: getPropertyValue(props.content),
      pipelineStage: getPropertyValue(props.hs_pipeline_stage),
      supportObject: getPropertyValue(props.support_object),
      createDate: createDateValue, // L∆ØU D∆Ø·ªöI D·∫†NG STRING NGUY√äN B·∫¢N
      syncedAt: new Date().toISOString() // CH·ªà syncedAt l√† ISO string c·ªßa ng√†y hi·ªán t·∫°i
    };
    
    logs.push(`üìã CreateDate cu·ªëi c√πng (string): "${detailedTicket.createDate}"`);

    // L·∫•y th√¥ng tin owner n·∫øu c√≥
    if (detailedTicket.ownerId) {
      try {
        logs.push('üë§ ƒêang l·∫•y th√¥ng tin owner...');
        const ownerName = await fetchOwnerInfo(detailedTicket.ownerId);
        detailedTicket.ownerName = String(ownerName || 'Unknown');
        logs.push(`‚úÖ Owner: ${detailedTicket.ownerName}`);
      } catch (error) {
        console.warn('Failed to fetch owner info:', error);
        detailedTicket.ownerName = 'Unknown';
        logs.push('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin owner');
      }
    }

    // L·∫•y category label n·∫øu c√≥
    if (detailedTicket.category) {
      try {
        logs.push('üè∑Ô∏è ƒêang l·∫•y category label...');
        const categoryLabel = await fetchTicketCategoryLabel(detailedTicket.category);
        detailedTicket.categoryLabel = String(categoryLabel || detailedTicket.category);
        logs.push(`‚úÖ Category: ${detailedTicket.categoryLabel}`);
      } catch (error) {
        console.warn('Failed to fetch category label:', error);
        detailedTicket.categoryLabel = detailedTicket.category;
        logs.push('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y category label');
      }
    }

    // C·∫≠p nh·∫≠t v√†o Firebase
    logs.push('üíæ ƒêang c·∫≠p nh·∫≠t v√†o Firebase...');
    await updateTicketInFirestore(ticketId, detailedTicket);
    logs.push('üéâ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!');

    return NextResponse.json({
      success: true,
      message: `ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng ticket ${ticketId}`,
      data: {
        ticketId: detailedTicket.ticketId,
        subject: detailedTicket.subject,
        category: detailedTicket.category,
        categoryLabel: detailedTicket.categoryLabel,
        ownerName: detailedTicket.ownerName,
        companyName: detailedTicket.companyName,
        sourceType: detailedTicket.sourceType,
        pipelineStage: detailedTicket.pipelineStage,
        createDate: detailedTicket.createDate
      },
      logs
    } as ApiResponse);

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('Error updating ticket:', error);
    
    return NextResponse.json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t ticket',
      error: errorMessage,
      logs: [`‚ùå L·ªói: ${errorMessage}`]
    } as ApiResponse, { status: 500 });
  }
}